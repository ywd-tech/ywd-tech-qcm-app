
import streamlit as st
import fitz  # PyMuPDF
import openai
import os

# Cl√© API (√† configurer comme variable d'environnement)
openai.api_key = os.getenv("OPENAI_API_KEY")

st.set_page_config(page_title="G√©n√©rateur de QCM intelligent", layout="wide")
st.title("üìò G√©n√©rateur intelligent de QCM √† partir d‚Äôun PDF m√©dical")

uploaded_file = st.file_uploader("üì• Importer un fichier PDF", type="pdf")

max_questions = st.slider("üî¢ Nombre maximum de QCM √† g√©n√©rer", 1, 100, 5)

if uploaded_file:
    st.info("üìÑ Lecture du contenu du PDF en cours...")
    with fitz.open(stream=uploaded_file.read(), filetype="pdf") as doc:
        texte = "\n".join([page.get_text() for page in doc])

    st.success("‚úÖ Texte extrait avec succ√®s !")
    st.text_area("üìù Aper√ßu du texte extrait", texte[:2000], height=200)

    if st.button("üß† G√©n√©rer les QCM automatiquement"):
        with st.spinner("G√©n√©ration en cours via OpenAI GPT..."):
            prompt = f"""
Tu es un expert en p√©dagogie m√©dicale. G√©n√©re {max_questions} QCM (questions √† choix multiples) √† partir du texte suivant :

---
{texte}
---

Pour chaque QCM, donne le r√©sultat au format JSON structur√© suivant :
[ {{
  "question": "...",
  "options": ["...", "...", "...", "..."],
  "correct_answers": [0, 2]  # indices des bonnes r√©ponses
}} ]

G√©n√®re uniquement la structure JSON.
"""

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.7,
                    max_tokens=3000
                )
                import json
                import re
                raw_text = response.choices[0].message.content.strip()
                json_text = re.search(r'\[.*\]', raw_text, re.DOTALL)
                qcm_list = json.loads(json_text.group()) if json_text else []

                st.success(f"üéØ {len(qcm_list)} QCM g√©n√©r√©s !")
                for i, q in enumerate(qcm_list):
                    st.markdown(f"**{i+1}. {q['question']}**")
                    user_choices = []
                    for j, opt in enumerate(q['options']):
                        checked = st.checkbox(opt, key=f"q{i}_opt{j}")
                        if checked:
                            user_choices.append(j)
                    if set(user_choices) == set(q['correct_answers']):
                        st.success("‚úÖ Bonne r√©ponse")
                    else:
                        bonnes = ", ".join([q['options'][k] for k in q['correct_answers']])
                        st.error(f"‚ùå Mauvaise r√©ponse. Bonne(s) r√©ponse(s) : {bonnes}")

            except Exception as e:
                st.error(f"Une erreur est survenue : {e}")
else:
    st.warning("üìÇ Veuillez importer un PDF pour commencer.")
